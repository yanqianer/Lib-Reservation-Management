/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * 中文文档
 * 开发文档
 * OpenAPI spec version: 1.0
 */
import type {
  AdminControllerCreate200,
  AdminControllerDoLogin200,
  AdminControllerFindAll200,
  AdminControllerFindOne200,
  AdminControllerRemove200,
  AdminControllerUpdate200,
  AnonymousControllerCreate200,
  AnonymousControllerFindAllByArticleId200,
  AnonymousControllerRemove200,
  AppControllerGetAuth200,
  AppControllerGetRole200,
  ArticleControllerCreate200,
  ArticleControllerFindAll200,
  ArticleControllerFindOneById200,
  ArticleControllerFindOneByTitle200,
  ArticleControllerRemove200,
  ArticleControllerUpdate200,
  CommentControllerCreate200,
  CommentControllerFindAllByArticleId200,
  CommentControllerRemove200,
  CreateAdminDto,
  CreateAnonymousDto,
  CreateArticleDto,
  CreateCommentDto,
  CreatePostDto,
  LoginAdminDto,
  PostControllerCreate200,
  PostControllerFindAll200,
  PostControllerGetByPage200,
  UpdateAdminDto,
  UpdateArticleDto,
  UploadControllerUploadImage200,
  UploadControllerUploadImageBody
} from './client.schemas'
import { customInstance } from './custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  export const get = () => {
const appControllerGetAuth = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AppControllerGetAuth200>(
      {url: `http://localhost:3000/test/auth`, method: 'GET'
    },
      options);
    }
  
/**
 * 是否为管理员
 * @summary 测试权限
 */
const appControllerGetRole = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AppControllerGetRole200>(
      {url: `http://localhost:3000/test/role`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary 登录接口
 */
const adminControllerDoLogin = (
    loginAdminDto: LoginAdminDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AdminControllerDoLogin200>(
      {url: `http://localhost:3000/admin/doLogin`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginAdminDto
    },
      options);
    }
  
/**
 * @summary 添加用户接口
 */
const adminControllerCreate = (
    createAdminDto: CreateAdminDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AdminControllerCreate200>(
      {url: `http://localhost:3000/admin`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createAdminDto
    },
      options);
    }
  
/**
 * @summary 获取全部
 */
const adminControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AdminControllerFindAll200>(
      {url: `http://localhost:3000/admin`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary 获取某一个
 */
const adminControllerFindOne = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AdminControllerFindOne200>(
      {url: `http://localhost:3000/admin/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary 更新某一个
 */
const adminControllerUpdate = (
    id: string,
    updateAdminDto: UpdateAdminDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AdminControllerUpdate200>(
      {url: `http://localhost:3000/admin/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateAdminDto
    },
      options);
    }
  
/**
 * @summary 删除某个用户，同时删除他的所有评论
 */
const adminControllerRemove = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AdminControllerRemove200>(
      {url: `http://localhost:3000/admin/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * 创建文章
 * @summary 创建文章
 */
const articleControllerCreate = (
    createArticleDto: CreateArticleDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ArticleControllerCreate200>(
      {url: `http://localhost:3000/article`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createArticleDto
    },
      options);
    }
  
/**
 * @summary 获取全部
 */
const articleControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ArticleControllerFindAll200>(
      {url: `http://localhost:3000/article`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary 标题搜索
 */
const articleControllerFindOneByTitle = (
    title: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ArticleControllerFindOneByTitle200>(
      {url: `http://localhost:3000/article/articleTitle/${title}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary id搜索
 */
const articleControllerFindOneById = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ArticleControllerFindOneById200>(
      {url: `http://localhost:3000/article/articleId/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary 更新文章
 */
const articleControllerUpdate = (
    id: string,
    updateArticleDto: UpdateArticleDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ArticleControllerUpdate200>(
      {url: `http://localhost:3000/article/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateArticleDto
    },
      options);
    }
  
/**
 * @summary 删除文章 文章评论一并删除
 */
const articleControllerRemove = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ArticleControllerRemove200>(
      {url: `http://localhost:3000/article/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary 创建一条评论
 */
const commentControllerCreate = (
    createCommentDto: CreateCommentDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CommentControllerCreate200>(
      {url: `http://localhost:3000/comment`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCommentDto
    },
      options);
    }
  
/**
 * @summary 获取某个文章的评论
 */
const commentControllerFindAllByArticleId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CommentControllerFindAllByArticleId200>(
      {url: `http://localhost:3000/comment/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary 删除某篇文章的全部评论
 */
const commentControllerRemove = (
    articleId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CommentControllerRemove200>(
      {url: `http://localhost:3000/comment/${articleId}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary 上传图片
 */
const uploadControllerUploadImage = (
    uploadControllerUploadImageBody: UploadControllerUploadImageBody,
 options?: SecondParameter<typeof customInstance>,) => {const formData = new FormData();
if(uploadControllerUploadImageBody.file !== undefined) {
 formData.append('file', uploadControllerUploadImageBody.file)
 }

      return customInstance<UploadControllerUploadImage200>(
      {url: `http://localhost:3000/upload/image`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  
/**
 * @summary 匿名创建评论
 */
const anonymousControllerCreate = (
    createAnonymousDto: CreateAnonymousDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AnonymousControllerCreate200>(
      {url: `http://localhost:3000/anonymous`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createAnonymousDto
    },
      options);
    }
  
/**
 * @summary 获取某个文章的匿名评论
 */
const anonymousControllerFindAllByArticleId = (
    articleId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AnonymousControllerFindAllByArticleId200>(
      {url: `http://localhost:3000/anonymous/${articleId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary 删除某篇文章的全部匿名评论
 */
const anonymousControllerRemove = (
    articleId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AnonymousControllerRemove200>(
      {url: `http://localhost:3000/anonymous/${articleId}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * 创建一个帖子
 * @summary 创建一个帖子
 */
const postControllerCreate = (
    createPostDto: CreatePostDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostControllerCreate200>(
      {url: `http://localhost:3000/post`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createPostDto
    },
      options);
    }
  
/**
 * 获取全部帖子
 * @summary 获取全部帖子
 */
const postControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostControllerFindAll200>(
      {url: `http://localhost:3000/post`, method: 'GET'
    },
      options);
    }
  
/**
 * 删除某一个帖子
 * @summary 删除某一个帖子
 */
const postControllerRemove = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `http://localhost:3000/post/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary 分页请求获取
 */
const postControllerGetByPage = (
    page: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostControllerGetByPage200>(
      {url: `http://localhost:3000/post/${page}`, method: 'GET'
    },
      options);
    }
  
return {appControllerGetAuth,appControllerGetRole,adminControllerDoLogin,adminControllerCreate,adminControllerFindAll,adminControllerFindOne,adminControllerUpdate,adminControllerRemove,articleControllerCreate,articleControllerFindAll,articleControllerFindOneByTitle,articleControllerFindOneById,articleControllerUpdate,articleControllerRemove,commentControllerCreate,commentControllerFindAllByArticleId,commentControllerRemove,uploadControllerUploadImage,anonymousControllerCreate,anonymousControllerFindAllByArticleId,anonymousControllerRemove,postControllerCreate,postControllerFindAll,postControllerRemove,postControllerGetByPage}};
export type AppControllerGetAuthResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['appControllerGetAuth']>>>
export type AppControllerGetRoleResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['appControllerGetRole']>>>
export type AdminControllerDoLoginResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['adminControllerDoLogin']>>>
export type AdminControllerCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['adminControllerCreate']>>>
export type AdminControllerFindAllResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['adminControllerFindAll']>>>
export type AdminControllerFindOneResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['adminControllerFindOne']>>>
export type AdminControllerUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['adminControllerUpdate']>>>
export type AdminControllerRemoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['adminControllerRemove']>>>
export type ArticleControllerCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['articleControllerCreate']>>>
export type ArticleControllerFindAllResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['articleControllerFindAll']>>>
export type ArticleControllerFindOneByTitleResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['articleControllerFindOneByTitle']>>>
export type ArticleControllerFindOneByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['articleControllerFindOneById']>>>
export type ArticleControllerUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['articleControllerUpdate']>>>
export type ArticleControllerRemoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['articleControllerRemove']>>>
export type CommentControllerCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['commentControllerCreate']>>>
export type CommentControllerFindAllByArticleIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['commentControllerFindAllByArticleId']>>>
export type CommentControllerRemoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['commentControllerRemove']>>>
export type UploadControllerUploadImageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['uploadControllerUploadImage']>>>
export type AnonymousControllerCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['anonymousControllerCreate']>>>
export type AnonymousControllerFindAllByArticleIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['anonymousControllerFindAllByArticleId']>>>
export type AnonymousControllerRemoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['anonymousControllerRemove']>>>
export type PostControllerCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['postControllerCreate']>>>
export type PostControllerFindAllResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['postControllerFindAll']>>>
export type PostControllerRemoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['postControllerRemove']>>>
export type PostControllerGetByPageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof get>['postControllerGetByPage']>>>
